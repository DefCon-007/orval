name: Publish to NPM

on:
  push:
    branches:
      - master
      - auto-release
  workflow_dispatch:  # Adds manual trigger capability

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'
      - name: Enable corepack
        run: corepack enable
      - name: Install dependencies
        run: yarn install --frozen-lockfile

    #   - name: Build packages
    #     run: yarn build

    #   - name: Run tests
    #     run: yarn test

      - name: Configure NPM
        run: |
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > .npmrc
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
      - name: Update README with latest version note
        run: |
          echo "\n\n> These are the latest versions from the original [orval library](https://github.com/orval-labs/orval/)." >> README.md
      - name: Update and publish packages
        run: |
            for package in core angular axios fetch hono mock query swr zod; do
                echo "Publishing package: $package"
                PACKAGE_JSON="packages/$package/package.json"

                # Update package.json if the package is not core
                if [ "$package" != "core" ]; then
                    echo "Updating @orval/core in package.json for: $package"

                    jq 'del(.dependencies["@orval/core"]) | .dependencies["@latest-version/orval-core"] = "latest"' $PACKAGE_JSON > tmp.json && mv tmp.json $PACKAGE_JSON
                fi

                # Fetch the current version of the package
                CURRENT_VERSION=$(npm view @latest-version/orval-$package version 2>/dev/null)

                # Check if npm view was successful
                if [ $? -ne 0 ]; then
                    echo "Failed to fetch version for @latest-version/orval-$package. Skipping version update."
                else
                    IFS='.' read -r major minor patch <<< "$CURRENT_VERSION"
                    NEW_PATCH=$((patch + 1))
                    NEW_VERSION="$major.$minor.$NEW_PATCH"
                    echo "Current version for @latest-version/orval-$package: $CURRENT_VERSION, new version: $NEW_VERSION"

                    jq --arg version "$NEW_VERSION" '.version = $version' $PACKAGE_JSON> tmp.json && mv tmp.json $PACKAGE_JSON
                fi

                jq --arg name "@latest-version/orval-$package" '.name = $name' $PACKAGE_JSON> tmp.json && mv tmp.json $PACKAGE_JSON

                cat $PACKAGE_JSON

                cd packages/$package
                npm publish --access public --tag latest --//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}
                cd -

            done
        env:
            NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
            YARN_NPM_PUBLISH_REGISTRY: "https://registry.npmjs.org"
    #   - name: Update core package and publish
    #     run: |
    #       cd packages/core
    #       npx change-package-name @latest-version/orval-core
    #       npm publish --access public --tag latest
    #     env:
    #         NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
    #         YARN_NPM_PUBLISH_REGISTRY: "https://registry.npmjs.org"
